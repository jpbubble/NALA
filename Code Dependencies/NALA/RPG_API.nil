table RPGParty
setmetatable(RPGParty,{
	["__newindex"] = void(t,key, value)
		switch type(key)
			case "number"
				assert(type(value)=="string","A string value is required to change a party member!")
				NALA_RPG:setPartyMember(key,value)
			case "string"
				switch key:upper()
					case "MAX"
						assert(type(value)=="number","MAX only accepts a number as value!")
						NALA_RPG.PartyMax = math.floor(value);
					default
						error("Unknown field!")
				end
			default
				error("Type "..type(key).." is completely useless as index for RPGParty")
		end
	end,
	
	["__index"] = var(t,key)
		switch type(key)
			case "number"				
				return NALA_RPG:getPartyMember(key)
			case "string"
				switch key:upper()
					case "MAX"						
						return NALA_RPG.PartyMax 
					default
						error("Unknown field!")
				end
			default
				error("Type "..type(key).." is completely useless as index for RPGParty")
		end
	end
	
})

class RPGStat
	readonly static table TagMap
	readonly string ChTag
	readonly string StTag
	
	get string Tag
		return string.format("%s::%s",self.ChTag,self.StTag)
	end
	
	static bool Static_Has(string ch, string stat)
		string t 
		t = string.format("%s::%s",RPGStat.ChTag,RPGStat.StTag)
		return RPGStat.TagMap[t]!=nil
	end
	
	static var GetStat(string ch,string stat)
		string t
		t = string.format("%s::%s",RPGStat.ChTag,RPGStat.StTag)
		return RPGStat.TagMap[t]
	end
	
	set string Script
		NALA_RPG:StatScript(self.ChTag,self.StTag,value)
	end
	
	get string Script
		return NALA_RPG:StatScript(self.ChTag,self.StTag,"**DONOTCHANGE**")
	end
	
	get number Value
		return NALA_RPG:GetStatValue(self.ChTag,self.StTag)
	end
	
	set number Value
		return NALA_RPG:SetStatValue(self.ChTag,self.StTag,value)
	end
	
	void CONSTRUCTOR(string char,string stat)
		assert(NALA_RPG:StatExists(char,stat) ,"You cannot use 'new RPGStat()' directly!")
		self.ChTag = char
		self.StTag = stat
		self.TagMap[Tag] = self
	end
end

class RPGPoints
	
	readonly string ChTag
	readonly string PtTag
	readonly static table TagMap
	
	get string Tag
		return string.format("%s::%s",self.ChTag,self.PtTag)
	end
	
	get number Maximum
		return NALA_RPG:GetMaxPoints(self.ChTag,self.PtTag,false)
	end
	
	set number Maximum
		NALA_RPG:SetMaxPoints(self.ChTag,self.PtTag,value,false)
	end
	
	get number Minimum
		return NALA_RPG:GetMinPoints(self.ChTag,self.PtTag,false)
	end
	
	set number Minimum
		NALA_RPG:SetMinPoints(self.ChTag,self.PtTag,value,false)
	end
	
	set number Have
		NALA_RPG:SetHavePoints(self.ChTag,self.PtTag,value,false)
	end
	
	get number Have
		return NALA_RPG:GetHavePoints(self.ChTag,self.PtTag,false)
	end

	set string MaxCopy
		NALA_RPG:SetMaxCopyPoints(self.ChTag,self.PtTag,value,false)
	end
	
	get string MaxCopy
		return NALA_RPG:GetMaxCopyPoints(self.ChTag,self.PtTag,false)
	end
	
	
	void CONSTRUCTOR(string Char,string Pnt, bool CreateIfNonExistent)
		NALA_RPG:ChkPoints(Char,Pnt,CreateIfNonExistent)
		self.ChTag = Char
		self.ptTag = Pnt
		self.TagMap[Tag] = self
		//-- Please note, when this goes wrong, the program will crash out anyway, so the class creation doesn't hurt at all!
	end
	
end


class RPGCharacter

	readonly string ChTag
	readonly static table TagMap
	readonly table Data
	
	
	void CONSTRUCTOR(string charTag)
		assert(NALA_RPG:CharExists(chTag),"You cannot use 'new RPGCharacter()' directly!")
		self.ChTag = chTag
		self.TagMap[chTag] = self
		setmetatable(self.Data,{
			['__newindex'] = void(t, string k, string v)
				NALA_RPG:SetData(self.ChTag,k,v)
			end,
			['__index'] = string(t, string k)
				return NALA:_RPG:GetData(self.ChTag,k)
			end
		})
	end
	
	static var GetChar(Tag)
		assert(self.TagMap[Tag] and NALA_RPG:CharExists[Tag],string.format("Requested character '%s' does not exist",Tag))
		return self.TagMap[Tag]
	end
	
	var Stat(string Stat, mustexist)
		if mustexist 
			assert(NALA_RPG:StatExists(self.ChTag,Stat),string.format("Character %s doesn't have stat %s",Char,Stat))
		elseif not NALA_RPG:StatExists(self.ChTag,Stat)
			NALE_RPG:CreateStat(self.ChTag,Stat,true)
		end
		if not RPGStat.Static_Has(self.ChTag,Stat)
			return new RPGStat(self.ChTag,Stat)
		end
		return RPGStat.GetStat(self.ChTag,Stat)
	end
	
	var Points(string Pnt, CreateIfNonExistent)
		var tag
		tag = string.format("%s::%s",self.ChTag,Pnt)
		if not RPGPoints.TagMap[tag]
			new RPGPoints(Pnt,CreateIfNonExistent==true)
		end
		return RPGPoints.TagMap[tag]
	end
	
	set string Name
		NALA_RPG:SetName(self.ChTag,value)
	end
	
	get string Name
		return NALA_RPG:GetName(self.ChTag)
	end
	
	
end


group RPG

	delegate GetChar

	get table Party
		return RPGParty
	end
	

	var CreateChar(string tag)
		NALA_RPG:CreateCharacter(tag)
		return new RPGCharacter(tag)
	end
	
	var Char(tag)
		return RPGCharacter.GetChar(tag)
	end
	
	void CONSTRUCTOR()
		GetChar = RPGCharacter.GetChar
	end

end
