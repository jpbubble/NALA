// License Information:
// Code Dependencies/NALA/RPG_API.nil
// RPG_API
// version: 19.08.05
// Copyright (C)  Jeroen P. Broks
// This software is provided 'as-is', without any express or implied
// warranty.  In no event will the authors be held liable for any damages
// arising from the use of this software.
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
// 1. The origin of this software must not be misrepresented; you must not
// claim that you wrote the original software. If you use this software
// in a product, an acknowledgment in the product documentation would be
// appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
// misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
// End License Information

string trimstring(string s)
  return (s:gsub("^%s*(.-)%s*$", "%1"))
end

var rpgsstringsplit(string inputstr, string sep)
        if sep == nil then
                sep = "%s"
        end
        table t
        int i=1
        for str in string.gmatch(inputstr, "([^"..sep.."]+)") do
                t[i] = str
                i = i + 1
        end
        return t
end

table RPGParty
setmetatable(RPGParty,{
	["__newindex"] = void(t,key, value)
		switch type(key)
			case "number"
				assert(type(value)=="string","A string value is required to change a party member!")
				NALA_RPG:setPartyMember(key,value)
			case "string"
				switch key:upper()
					case "MAX"
						assert(type(value)=="number","MAX only accepts a number as value!")
						NALA_RPG.PartyMax = math.floor(value);
					case "PARTY"
						assert(type(value)=="table","PARTY only accepts a table containing a party")
						for i=1,NALA_RPG.PartyMax do
							t[1] = value[i] or ""
						end
					default
						error("Unknown field!")
				end
			default
				error("Type "..type(key).." is completely useless as index for RPGParty")
		end
	end,
	
	["__index"] = var(t,key)
		switch type(key)
			case "number"				
				return NALA_RPG:getPartyMember(key)
			case "string"
				switch key:upper()
					case "MAX"						
						return NALA_RPG.PartyMax 
					default
						error("Unknown field!")
				end
			default
				error("Type "..type(key).." is completely useless as index for RPGParty")
		end
	end
	
})

class RPGStat
	readonly static table TagMap
	readonly string ChTag
	readonly string StTag
	
	get string Tag
		return string.format("%s::%s",self.ChTag,self.StTag)
	end
	
	static bool Static_Has(string ch, string stat)
		string t 
		//t = string.format("%s::%s",RPGStat.ChTag,RPGStat.StTag)
		t = string.format("%s::%s",ch,stat)
		return RPGStat.TagMap[t]!=nil;
	end

	
	static var GetStat(string ch,string stat)
		string t
		//t = string.format("%s::%s",RPGStat.ChTag,RPGStat.StTag)
		t = string.format("%s::%s",ch,stat)
		return RPGStat.TagMap[t]
	end
	
	set string Script
		NALA_RPG:StatScript(self.ChTag,self.StTag,value)
	end
	
	get string Script
		return NALA_RPG:StatScript(self.ChTag,self.StTag,"**DONOTCHANGE**")
	end
	
	get number Value
		return NALA_RPG:GetStatValue(self.ChTag,self.StTag)
	end
	
	set number Value
		NALA_RPG:SetStatValue(self.ChTag,self.StTag,value)
	end
	
	void Link(string TargetChar)
		NALA_RPG:LinkStat(self.ChTag,self.StTag,TargetChar)
	end
	
	void CONSTRUCTOR(string char,string stat)
		assert(NALA_RPG:StatExists(char,stat) ,"You cannot use 'new RPGStat()' directly!")
		self.ChTag = char
		self.StTag = stat
		self.TagMap[self.Tag] = self
	end
end

class RPGPoints
	
	readonly string ChTag
	readonly string PtTag
	readonly static table TagMap
	
	get string Tag
		return string.format("%s::%s",self.ChTag,self.PtTag)
	end
	
	get number Maximum
		return NALA_RPG:GetMaxPoints(self.ChTag,self.PtTag,false)
	end
	
	set number Maximum
		NALA_RPG:SetMaxPoints(self.ChTag,self.PtTag,value,false)
	end
	
	get number Minimum
		return NALA_RPG:GetMinPoints(self.ChTag,self.PtTag,false)
	end
	
	set number Minimum
		NALA_RPG:SetMinPoints(self.ChTag,self.PtTag,value,false)
	end
	
	get number Max
		return self.Maximum
	end
	
	set number Max
		self.Maximum = value
	end
	
	set number Have
		NALA_RPG:SetHavePoints(self.ChTag,self.PtTag,value,false)
	end
	
	get number Have
		return NALA_RPG:GetHavePoints(self.ChTag,self.PtTag,false)
	end

	set string MaxCopy
		NALA_RPG:SetMaxCopyPoints(self.ChTag,self.PtTag,value,false)
	end
	
	get string MaxCopy
		return NALA_RPG:GetMaxCopyPoints(self.ChTag,self.PtTag,false)
	end
	
	void Inc(int v)
		self.Have = self.Have + v
	end
	
	void Dec(int v)
		self.Have = self.Have - v
	end
		
	
	void CONSTRUCTOR(string Char,string Pnt, CreateIfNonExistent)
		NALA_RPG:ChkPoints(Char,Pnt,CreateIfNonExistent==true)
		self.ChTag = Char
		self.PtTag = Pnt
		self.TagMap[self.Tag] = self
		//-- Please note, when this goes wrong, the program will crash out anyway, so the class creation doesn't hurt at all!
	end
	
	void Kill()
		self.TagMap[self.Tag] = nil;
	end
	
end

class RPGCharacter

	readonly string ChTag
	readonly static table TagMap
	readonly table Data
	
	void CONSTRUCTOR(string charTag)
		assert(NALA_RPG:CharExists(charTag),"You cannot use 'new RPGCharacter()' directly!")
		self.ChTag = charTag
		self.TagMap[charTag] = self
		setmetatable(self.Data,{
			['__newindex'] = void(t, string k, string v)
				NALA_RPG:SetCharData(self.ChTag,k,v)
			end,
			['__index'] = string(t, string k)
				return NALA_RPG:GetCharData(self.ChTag,k)
			end
		})
	end
	
	static var GetChar(string Tag)
		Tag = trimstring(Tag)
		if (not RPGCharacter.TagMap[Tag]) and NALA_RPG:CharExists(Tag)
			new RPGCharacter(Tag)
		end
		assert(RPGCharacter.TagMap[Tag] and NALA_RPG:CharExists(Tag),string.format("Requested character '%s' does not exist\n\n%s",Tag,debug.traceback()))
		return RPGCharacter.TagMap[Tag]
	end
	
	var Stat(string Stat, mustexist)
		if mustexist 
			assert(NALA_RPG:StatExists(self.ChTag,Stat),string.format("Character %s doesn't have stat %s",self.ChTag,Stat))
		elseif not NALA_RPG:StatExists(self.ChTag,Stat)
			CSay(string.format("Creating stat %s for %s",Stat,self.ChTag) ) // debug line
			NALA_RPG:CreateStat(self.ChTag,Stat,true)
		end
		if not RPGStat.Static_Has(self.ChTag,Stat)
			return new RPGStat(self.ChTag,Stat)
		end
		return RPGStat.GetStat(self.ChTag,Stat)
	end
	
	var Points(string Pnt, CreateIfNonExistent)
		var tag
		string tcheck
		tcheck = type(CreateIfNonExistent)
		assert(tcheck=="nil" or tcheck=="boolean","Optional parameter 'CreateIfNonExistent' must be either boolean or not be set at all! Not a "..tcheck)
		//CSay(string.format("Points('%s',%s) executing!",tostring(Pnt),tostring(CreateIfNonExistent)))
		tag = string.format("%s::%s",self.ChTag,Pnt)
		if CreateIfNonExistent and RPGPoints.TagMap[tag] then
			RPGPoints.TagMap[tag].Kill()
		end
		if not RPGPoints.TagMap[tag] then
			new RPGPoints(self.ChTag,Pnt,CreateIfNonExistent==true)
		end
		return RPGPoints.TagMap[tag]
	end
	
	set string Name
		NALA_RPG:SetName(self.ChTag,value)
	end
	
	get string Name
		return NALA_RPG:GetName(self.ChTag)
	end
	
	get table ListStats
		string scr
		delegate f
		scr = NALA_RPG:ListStats(self.ChTag)
		f = NIL.Load(scr,"List stat readout for: "..self.ChTag)
		return f()
	end
	
	get var EachStat
		table work
		int i = 0
		work = self.ListStats
		table.sort(work)
		return var()
			i++
			if work[i]==nil then
				return nil,nil;
			end
			return work[i],self.Stat(work[i]).Value,self.Stat(work[i])
		end
	end
	
end

group RPG

	var GetChar

	get table Party
		return RPGParty
	end
	
	set table Party
		RPGParty.Party = value
	end
	

	var CreateChar(string tag)
		NALA_RPG:CreateChar(tag)
		return new RPGCharacter(tag)
	end
	
	var Char(string tag)
		return RPGCharacter.GetChar(tag)
	end
	
	get table Chars
		return rpgsstringsplit(NALA_RPG:CharListString(),";")
	end
	
	get var EachChar
		int i = 0
		table ch
		ch = self.Chars
		return string()
			i++
			return ch[i]
		end
	end
	
	var KillChar(string key)
		NALA_RPG:KillChar(key)
	end
	
	void CONSTRUCTOR()
		self.GetChar = RPGCharacter.GetChar
	end

end

